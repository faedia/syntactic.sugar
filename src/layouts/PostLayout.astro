---
import Layout from "./Layout.astro";
import type { CollectionEntry } from "astro:content";

type Props = CollectionEntry<"blog">["data"];
const post = Astro.props as Props;

import TagPill from "../components/TagPill.astro";
---

<Layout title={post.title} description={post.description}>
    <div
        class="mb-8 border-2 border-purple-600 p-8 rounded-sm bg-zinc-50 dark:bg-zinc-800 transition-colors"
    >
        <article>
            <div>
                <h1 class="text-3xl font-extrabold">
                    {post.title}
                </h1>
                <p
                    class="text-zinc-500 text-base mt-2 mb-4 dark:text-zinc-300 transition-colors"
                >
                    {
                        post.pubDate.toLocaleDateString("en-US", {
                            month: "long",
                            day: "numeric",
                            year: "numeric",
                        })
                    }
                    &middot;
                    {post.author.name}
                </p>
                <div>
                    {
                        post.tags && post.tags.length > 0 ? (
                            <ul class="flex flex-wrap gap-2">
                                {post.tags.map((tag) => (
                                    <li class="text-sm">
                                        <TagPill
                                            href={`/tags/${tag}/`}
                                            title={tag}
                                        />
                                    </li>
                                ))}
                            </ul>
                        ) : null
                    }
                </div>
            </div>
            <div
                class="mt-6 prose mx-auto !max-w-none prose-pre:mx-0 sm:prose-pre:mx-8 [&_svg]:max-h-[60rem] [&_svg]:mx-auto text-lg
                prose-a:text-purple-600 dark:prose-a:text-purple-400 prose-a:hover:text-purple-700 dark:prose-a:hover:text-purple-300
                prose-a:no-underline
                dark:prose-invert prose-ul:list-disc prose-ul:marker:text-zinc-500
                prose-ul:my-0 prose-li:my-0
                transition-colors
                prose-inline-code:after:content-none prose-inline-code:before:content-none prose-inline-code:rounded-sm prose-inline-code:bg-zinc-200 dark:prose-inline-code:bg-zinc-700
                prose-inline-code:px-1 prose-inline-code:py-0.5 prose-inline-code:text-zinc-800 dark:prose-inline-code:text-zinc-200 prose-inline-code:font-medium prose-inline-code:text-sm"
            >
                <slot />
            </div>
        </article>
    </div>
    <!-- Giscus Comments here! -->
    <section
        id="comments"
        class="mb-8 border-2 border-purple-600 p-8 rounded-sm bg-zinc-50 dark:bg-zinc-800 transition-colors"
    >
        <h2>Comments</h2>
        <div id="giscus-container"></div>
        <script>
            function getGiscusTheme() {
                return document.documentElement.classList.contains("dark")
                    ? "catppuccin_mocha"
                    : "catppuccin_latte";
            }

            function loadGiscus() {
                const theme = getGiscusTheme();

                // Create and configure the script element
                const script = document.createElement("script");
                script.src = "https://giscus.app/client.js";
                script.setAttribute("data-repo", "faedia/syntactic.sugar");
                script.setAttribute("data-repo-id", "R_kgDOO8vXHQ");
                script.setAttribute("data-category", "General");
                script.setAttribute("data-category-id", "DIC_kwDOO8vXHc4CrlRt");
                script.setAttribute("data-mapping", "pathname");
                script.setAttribute("data-strict", "0");
                script.setAttribute("data-reactions-enabled", "1");
                script.setAttribute("data-emit-metadata", "0");
                script.setAttribute("data-input-position", "top");
                script.setAttribute("data-theme", theme);
                script.setAttribute("data-lang", "en");
                script.setAttribute("crossorigin", "anonymous");
                script.async = true;

                // Append the script to load Giscus
                document
                    .getElementById("giscus-container")
                    ?.appendChild(script);
            }

            function changeGiscusTheme(theme: string) {
                const giscusFrame = document.querySelector(
                    "iframe.giscus-frame",
                ) as HTMLIFrameElement | null;
                if (giscusFrame) {
                    giscusFrame.contentWindow?.postMessage(
                        { giscus: { setConfig: { theme } } },
                        "https://giscus.app",
                    );
                }
            }

            // Load Giscus initially
            loadGiscus();

            // Watch for theme changes and update Giscus theme
            let classWatcher = new MutationObserver(() => {
                const newTheme = getGiscusTheme();
                console.log(
                    "Theme changed, updating Giscus theme to:",
                    newTheme,
                );
                changeGiscusTheme(newTheme);
            });

            classWatcher.observe(document.documentElement, {
                attributes: true,
                attributeFilter: ["class"],
            });
        </script>
    </section>
</Layout>
